document.addEventListener("DOMContentLoaded", () => {  const modal = document.getElementById("certificate-modal");  const modalImg = document.getElementById("modal-img");  const captionText = document.getElementById("modal-caption");  const closeBtn = document.getElementById("close-modal");  const certificateGrid = document.querySelector(".certificate-grid"); const prevBtn = document.getElementById("gallery-prev"); const nextBtn = document.getElementById("gallery-next"); let scrollPosition = 0;  let isDown = false; let startX; let scrollLeft; let autoScrollInterval; let isAutoScrolling = true;  const setupInfiniteScroll = () => { const certificates = certificateGrid.querySelectorAll('.certificate-item'); const certificateCount = certificates.length;  certificates.forEach(cert => { const clone = cert.cloneNode(true); certificateGrid.appendChild(clone); });  document.querySelectorAll(".certificate-item img").forEach(img => {  img.addEventListener("click", () => {  scrollPosition = window.scrollY;  document.body.style.position = 'fixed';  document.body.style.top = `-${scrollPosition}px`;  document.body.classList.add("modal-open");  document.documentElement.classList.add("modal-open");  modal.style.display = "flex";  modalImg.src = img.src;  captionText.textContent = img.alt;  });  }); return certificateCount; }; const certificateCount = setupInfiniteScroll();  const startAutoScroll = () => { if (!isAutoScrolling) return; autoScrollInterval = setInterval(() => { if (!isAutoScrolling) return; const scrollStep = 2.5;  const singleSetWidth = certificateGrid.scrollWidth / 2;   certificateGrid.scrollLeft += scrollStep;  if (certificateGrid.scrollLeft >= singleSetWidth) {  const currentBehavior = certificateGrid.style.scrollBehavior; certificateGrid.style.scrollBehavior = 'auto'; certificateGrid.scrollLeft = 0;  certificateGrid.style.scrollBehavior = currentBehavior; } }, 20);  }; const stopAutoScroll = () => { isAutoScrolling = false; if (autoScrollInterval) { clearInterval(autoScrollInterval); autoScrollInterval = null; } }; const resumeAutoScroll = () => { setTimeout(() => { isAutoScrolling = true; startAutoScroll(); }, 2000);  };  startAutoScroll();  const addCertificateHoverListeners = () => { document.querySelectorAll(".certificate-item").forEach(cert => { cert.addEventListener('mouseenter', stopAutoScroll); cert.addEventListener('mouseleave', resumeAutoScroll); }); }; addCertificateHoverListeners();  if (prevBtn && nextBtn) { prevBtn.addEventListener('mouseenter', stopAutoScroll); nextBtn.addEventListener('mouseenter', stopAutoScroll); prevBtn.addEventListener('mouseleave', resumeAutoScroll); nextBtn.addEventListener('mouseleave', resumeAutoScroll); }  certificateGrid.addEventListener('mousedown', (e) => { stopAutoScroll(); isDown = true; certificateGrid.classList.add('active'); startX = e.pageX - certificateGrid.offsetLeft; scrollLeft = certificateGrid.scrollLeft; }); certificateGrid.addEventListener('mouseleave', () => { isDown = false; certificateGrid.classList.remove('active'); if (!isDown) resumeAutoScroll(); }); certificateGrid.addEventListener('mouseup', () => { isDown = false; certificateGrid.classList.remove('active'); resumeAutoScroll(); }); certificateGrid.addEventListener('mousemove', (e) => { if (!isDown) return; e.preventDefault(); const x = e.pageX - certificateGrid.offsetLeft; const walk = (x - startX) * 2; certificateGrid.scrollLeft = scrollLeft - walk; });  certificateGrid.addEventListener('touchstart', (e) => { stopAutoScroll(); startX = e.touches[0].pageX - certificateGrid.offsetLeft; scrollLeft = certificateGrid.scrollLeft; }); certificateGrid.addEventListener('touchmove', (e) => { if (!startX) return; const x = e.touches[0].pageX - certificateGrid.offsetLeft; const walk = (x - startX) * 2; certificateGrid.scrollLeft = scrollLeft - walk; }); certificateGrid.addEventListener('touchend', () => { resumeAutoScroll(); });  if (prevBtn && nextBtn) { prevBtn.addEventListener('click', () => { stopAutoScroll(); certificateGrid.scrollBy({ left: -300, behavior: 'smooth' }); resumeAutoScroll(); }); nextBtn.addEventListener('click', () => { stopAutoScroll(); certificateGrid.scrollBy({ left: 300, behavior: 'smooth' }); resumeAutoScroll(); });   const updateNavButtons = () => { prevBtn.disabled = false; nextBtn.disabled = false; }; certificateGrid.addEventListener('scroll', updateNavButtons); updateNavButtons();  } function closeModal() {  modal.style.display = "none";  document.body.classList.remove("modal-open");  document.documentElement.classList.remove("modal-open");  document.body.style.position = '';  document.body.style.top = '';  window.scrollTo(0, scrollPosition);  }  closeBtn.addEventListener("click", closeModal);  window.addEventListener("click", e => {  if (e.target === modal) closeModal();  });  window.addEventListener("keydown", e => {  if (e.key === "Escape") closeModal();  });});
